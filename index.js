const express = require('express');
const multer = require('multer');
const sharp = require('sharp');
const axios = require('axios');
const OpenAI = require('openai');
const path = require('path');
const cors = require('cors');
const fs = require('fs');
require('dotenv').config();

const app = express();
const upload = multer({ dest: 'uploads/' });

app.use(cors());

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

app.post('/generate-image', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).send('No image file uploaded');
    }

    const uploadedImage = sharp(req.file.path);
    const metadata = await uploadedImage.metadata();
    const imageCharacteristics = await analyzeImage(uploadedImage);

    const prompt = generatePrompt(imageCharacteristics, metadata);

    let finalImage;
    try {
      const response = await openai.images.generate({
        model: "dall-e-3",
        prompt: prompt,
        n: 1,
        size: "1024x1024",
      });

      if (!response.data || response.data.length === 0) {
        throw new Error('No image generated by OpenAI');
      }

      const generatedImageUrl = response.data[0].url;
      const generatedImageBuffer = (await axios.get(generatedImageUrl, { responseType: 'arraybuffer' })).data;

      finalImage = await processImage(generatedImageBuffer);
    } catch (openaiError) {
      console.error('OpenAI API Error:', openaiError);
      console.log('Using original image as fallback');
      const originalImageBuffer = await uploadedImage.toBuffer();
      finalImage = await processImage(originalImageBuffer);
    }

    res.writeHead(200, { 'Content-Type': 'images/1.png' });
    res.end(finalImage, 'binary');
  } catch (error) {
    console.error('Error in image processing:', error);
    res.status(500).send(`Error processing image: ${error.message}`);
  } finally {
    // Clean up the uploaded file
    if (req.file) {
      fs.unlink(req.file.path, (err) => {
        if (err) console.error('Error deleting uploaded file:', err);
      });
    }
  }
});

async function analyzeImage(image) {
  const { dominant } = await image.stats();
  const { width, height } = await image.metadata();

  // Analyze image to determine if it's primarily light or dark
  const { channels } = await image.stats();
  const averageBrightness = (channels[0].mean + channels[1].mean + channels[2].mean) / 3;
  const tone = averageBrightness > 128 ? 'light' : 'dark';

  // Determine if the image is more colorful or monochromatic
  const colorfulness = Math.max(...channels.map(c => c.stdev));
  const colorCharacteristic = colorfulness > 30 ? 'colorful' : 'monochromatic';

  return {
    dominantColor: `rgb(${dominant.r}, ${dominant.g}, ${dominant.b})`,
    aspectRatio: width / height,
    tone,
    colorCharacteristic
  };
}

function generatePrompt(characteristics, metadata) {
  const { aspectRatio } = characteristics;

  const prompt = `Generate an image that conceptually resembles the uploaded image. Ensure that the persons, characters, and items in the image are displayed clearly and prominently. While the overall idea or theme should be similar to the uploaded image, make sure to use different colors and tones. Maintain an aspect ratio of ${aspectRatio.toFixed(2)} and ensure that the key elements are easily recognizable and well-defined. The image should be in a cartoon and fun style, with exaggerated features, bright colors, and a whimsical atmosphere.`;

}


async function processImage(imageBuffer) {
  const logoPath = path.join(__dirname, 'images', '1.png');
  
  // Check if logo file exists
  if (!fs.existsSync(logoPath)) {
    console.warn('Logo file not found. Proceeding without logo.');
    return sharp(imageBuffer)
      .resize(1024, 1024, { fit: 'inside' })
      .toBuffer();
  }

  const logo = await sharp(logoPath).resize(100).toBuffer();

  return sharp(imageBuffer)
    .resize(1024, 1024, { fit: 'inside' })
    .composite([{ input: logo, gravity: 'southeast' }])
    .toBuffer();
}

const port = process.env.PORT || 4000;
app.listen(port, () => console.log(`Server started on http://localhost:${port}`));